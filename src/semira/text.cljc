(ns semira.text
  (:require [clojure.string :as string]))

(let [trans {#"[ÁĂÂÄÀĀĄÅÃ]"  "A"
             #"[áăâäàāąåã]"  "a"
             #"Æ"            "AE"
             #"æ"            "ae"
             #"[ĆČÇĈĊ]"      "C"
             #"[ćčçĉċ]"      "c"
             #"[ĎĐ]"         "D"
             #"[ďđ]"         "d"
             #"[ÉĔĚÊËĖÈĒĘÐ]" "E"
             #"[éĕěêëėèēęð]" "e"
             #"[ĞĢĜĠ]"       "G"
             #"[ğģĝġ]"       "g"
             #"[ĤĦ]"         "H"
             #"[ĥħ]"         "h"
             #"[ÍĬÎÏİÌĪĮĨ]"  "I"
             #"[ıíĭîïìīįĩ]"  "i"
             #"Ĳ"            "IJ"
             #"ĳ"            "ij"
             #"Ĵ"            "J"
             #"ĵ"            "j"
             #"Ķ"            "K"
             #"[ķĸ]"         "k"
             #"[ĹĽĻĿŁ]"      "L"
             #"[ĺľļŀł]"      "l"
             #"[ŊŃŇŅÑ]"      "N"
             #"[ŋńňņŉñ]"     "n"
             #"Œ"            "OE"
             #"œ"            "oe"
             #"[ÓŎÔÖÒŌØÕŐ]"  "O"
             #"[óŏôöòōøõő]"  "o"
             #"Þ"            "P"
             #"þ"            "p"
             #"[ŔŘŖ]"        "R"
             #"[ŕřŗ]"        "r"
             #"[ŚŠŞŜ]"       "S"
             #"[ſśšşŝ]"      "s"
             #"ß"            "ss"
             #"[ŤŢŦ]"        "T"
             #"[ťţŧ]"        "t"
             #"[ÚŬÛÜŰÙŪŲŨŮ]" "U"
             #"[úŭûüűùūųũů]" "u"
             #"Ŵ"            "W"
             #"ŵ"            "w"
             #"[ÝŶŸ]"        "Y"
             #"[ýŷÿ]"        "y"
             #"[ŹŽŻ]"        "Z"
             #"[źžż]"        "z"}]
  (defn translit-to-ascii
    "Transliterate given string to ascii only characters."
    [s]
    (reduce (fn [s [m r]] (string/replace s m r))
            s
            trans)))
